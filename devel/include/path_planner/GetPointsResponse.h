// Generated by gencpp from file path_planner/GetPointsResponse.msg
// DO NOT EDIT!


#ifndef PATH_PLANNER_MESSAGE_GETPOINTSRESPONSE_H
#define PATH_PLANNER_MESSAGE_GETPOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planner
{
template <class ContainerAllocator>
struct GetPointsResponse_
{
  typedef GetPointsResponse_<ContainerAllocator> Type;

  GetPointsResponse_()
    : points_array()
    , poke_further_points_array()
    , shape()  {
    }
  GetPointsResponse_(const ContainerAllocator& _alloc)
    : points_array(_alloc)
    , poke_further_points_array(_alloc)
    , shape(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _points_array_type;
  _points_array_type points_array;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _poke_further_points_array_type;
  _poke_further_points_array_type poke_further_points_array;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::path_planner::GetPointsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planner::GetPointsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPointsResponse_

typedef ::path_planner::GetPointsResponse_<std::allocator<void> > GetPointsResponse;

typedef boost::shared_ptr< ::path_planner::GetPointsResponse > GetPointsResponsePtr;
typedef boost::shared_ptr< ::path_planner::GetPointsResponse const> GetPointsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planner::GetPointsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planner::GetPointsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::GetPointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::GetPointsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::GetPointsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::GetPointsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::GetPointsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::GetPointsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planner::GetPointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "37d9a86923a6c69a3912b000f406889e";
  }

  static const char* value(const ::path_planner::GetPointsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x37d9a86923a6c69aULL;
  static const uint64_t static_value2 = 0x3912b000f406889eULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planner::GetPointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planner/GetPointsResponse";
  }

  static const char* value(const ::path_planner::GetPointsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planner::GetPointsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] points_array\n\
float32[] poke_further_points_array\n\
float32[] shape\n\
";
  }

  static const char* value(const ::path_planner::GetPointsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planner::GetPointsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points_array);
      stream.next(m.poke_further_points_array);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPointsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planner::GetPointsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planner::GetPointsResponse_<ContainerAllocator>& v)
  {
    s << indent << "points_array[]" << std::endl;
    for (size_t i = 0; i < v.points_array.size(); ++i)
    {
      s << indent << "  points_array[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.points_array[i]);
    }
    s << indent << "poke_further_points_array[]" << std::endl;
    for (size_t i = 0; i < v.poke_further_points_array.size(); ++i)
    {
      s << indent << "  poke_further_points_array[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.poke_further_points_array[i]);
    }
    s << indent << "shape[]" << std::endl;
    for (size_t i = 0; i < v.shape.size(); ++i)
    {
      s << indent << "  shape[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.shape[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNER_MESSAGE_GETPOINTSRESPONSE_H
